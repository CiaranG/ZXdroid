/*

   Copyright (c) 2010 Dmitry Rodin

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License along
   with this program; if not, write to the Free Software Foundation, Inc.,
   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

   Author contact information:

   E-mail: rodin.dmitry@gmail.com

*/

#include <config.h>

#include <limits.h>
#include <stdio.h>
#include <string.h>

#include <libspectrum.h>

#include <GLES/gl.h>
#include <GLES/glext.h>

#include "android.h"

#include "display.h"
#include "fuse.h"
#include "machine.h"
#include "scld.h"
#include "settings.h"
#include "ui/ui.h"
#include "ui/uidisplay.h"
#include "utils.h"
#ifdef USE_WIDGET
#include "ui/widget/widget.h"
#endif				/* #ifdef USE_WIDGET */
#include "androiddisplay.h"

uint16_t *display_screen=NULL;

int ip, cx, cy, mx, my, mw, mh;
uint16_t *part_screen=NULL;

int needRedraw;

static int image_width = 320;
static int image_height = 240;

static uint16_t colour_values[16];

static ANDROID_Color colour_palette[] = {
  {   0,   0,   0 }, 
  {   0,   0, 192 }, 
  { 192,   0,   0 }, 
  { 192,   0, 192 }, 
  {   0, 192,   0 }, 
  {   0, 192, 192 }, 
  { 192, 192,   0 }, 
  { 192, 192, 192 }, 
  {   0,   0,   0 }, 
  {   0,   0, 255 }, 
  { 255,   0,   0 }, 
  { 255,   0, 255 }, 
  {   0, 255,   0 }, 
  {   0, 255, 255 }, 
  { 255, 255,   0 }, 
  { 255, 255, 255 }
};

//static int timex;

static int androiddisplay_allocate_colours( int numColours, uint16_t *colour_values );
static int androiddisplay_load_gfx_mode( void );

int uidisplay_init( int width, int height ) {
    //timex = machine_current->timex;

    if( androiddisplay_load_gfx_mode() ) return 1;

    /* We can now output error messages to our output device */
    display_ui_initialised = 1;

    return 0;
}

static int androiddisplay_allocate_colours( int numColours, uint16_t *colour_values ) {
    int i;
    uint8_t red, green, blue;

    for( i = 0; i < numColours; i++ ) {

          red = colour_palette[i].r;
        green = colour_palette[i].g;
         blue = colour_palette[i].b;

        colour_values[i] = ( (red >> 3) << 11 ) | ( (green >> 2) << 5 ) | (blue >> 3);
    }
    
    return 0;
}

static int androiddisplay_load_gfx_mode( void ) {

    if (display_screen!=NULL) {
        free(display_screen);
        display_screen=NULL;
    }
    display_screen = (uint16_t*)malloc(image_width*image_height*2);
    memset(display_screen, 0xFF, image_width*image_height*2);    

    mx = -1;  mw = -1; my = -1; mh = -1;
    if (part_screen!=NULL) {
        free(part_screen);
        part_screen=NULL;
    }
    part_screen = (uint16_t*)malloc(image_width*image_height*2);
    memset(part_screen, 0xFF, image_width*image_height*2);    

    uint16_t *tmp_screen=NULL;
    tmp_screen = (uint16_t*)malloc(512*512*2);
    memset(tmp_screen, 0x30, 512*512*2);

    /* GL Init */
    glBindTexture(GL_TEXTURE_2D, 0);
    glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    if (mScaling && mWidth!=image_width) {
        glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    } else {
        glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
        glTexParameterx(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    }
    glTexEnvx(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);
    glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
    glEnable(GL_TEXTURE_2D);
    glDisable(GL_DITHER);
    glDisable(GL_DEPTH_TEST);
    glDisable(GL_BLEND);
    glDisable(GL_MULTISAMPLE);
    glDisable(GL_CULL_FACE);
    glShadeModel(GL_FLAT);
    GLint crop[4] = { 0, image_height, image_width, -image_height };
    glTexParameteriv(GL_TEXTURE_2D, GL_TEXTURE_CROP_RECT_OES, crop);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, 512, 512, 0, GL_RGB, GL_UNSIGNED_SHORT_5_6_5, tmp_screen);
    glDrawTexiOES(0, 0, 1, mWidth, mHeight);
    LOGI("r%i", glGetError());
    glFinish();
    /* finish GL init */
  
    free(tmp_screen);  

    androiddisplay_allocate_colours( 16, colour_values );

    /* Redraw the entire screen... */
    display_refresh_all();


    return 0;
}

void uidisplay_frame_end( void ) {

    mw -= mx;
    mh -= my;

    if (mx==-1 || my==-1 || mw==-1 || mh==-1) {
        //noop
    } else if (mx==0 && my==0 && mw==image_width && mh==image_height) {

        glTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, image_width, image_height, GL_RGB, GL_UNSIGNED_SHORT_5_6_5, display_screen);

    } else {

        ip=0;
        for (cy=my;cy<my+mh;cy++) {
            for (cx=mx;cx<mx+mw;cx++) {
                part_screen[ip] = display_screen[cx+cy*image_width];
                ip++;
            }
        }

        glTexSubImage2D(GL_TEXTURE_2D, 0, mx, my, mw, mh, GL_RGB, GL_UNSIGNED_SHORT_5_6_5, part_screen);
    }

    glDrawTexiOES(0, 0, 1, mWidth, mHeight);

    mx = -1;  mw = -1; my = -1; mh = -1;

    needRedraw = 1;
}

/* Set one pixel in the display */
void uidisplay_putpixel( int x, int y, int colour ) {
    display_screen[x+y*image_width] = colour_values[ colour ];
}

/* Print the 8 pixels in `data' using ink colour `ink' and paper
   colour `paper' to the screen at ( (8*x) , y ) */
void uidisplay_plot8( int x, int y, libspectrum_byte data, libspectrum_byte ink, libspectrum_byte paper ) {
    x <<= 3;

    if (mx == -1 || mx > x) mx = x;
    if (my == -1 || my > y) my = y;
    if (mw == -1 || mw < x+8) mw = x+8;    
    if (mh == -1 || mh < y+1) mh = y+1;    

    display_screen[x+y*image_width+0] = ( data & 0x80 ) ? colour_values[ ink ] : colour_values[ paper ];
    display_screen[x+y*image_width+1] = ( data & 0x40 ) ? colour_values[ ink ] : colour_values[ paper ];
    display_screen[x+y*image_width+2] = ( data & 0x20 ) ? colour_values[ ink ] : colour_values[ paper ];
    display_screen[x+y*image_width+3] = ( data & 0x10 ) ? colour_values[ ink ] : colour_values[ paper ];
    display_screen[x+y*image_width+4] = ( data & 0x08 ) ? colour_values[ ink ] : colour_values[ paper ];
    display_screen[x+y*image_width+5] = ( data & 0x04 ) ? colour_values[ ink ] : colour_values[ paper ];
    display_screen[x+y*image_width+6] = ( data & 0x02 ) ? colour_values[ ink ] : colour_values[ paper ];
    display_screen[x+y*image_width+7] = ( data & 0x01 ) ? colour_values[ ink ] : colour_values[ paper ];
}

/* Print the 16 pixels in `data' using ink colour `ink' and paper
   colour `paper' to the screen at ( (16*x) , y ) */
void uidisplay_plot16( int x, int y, libspectrum_word data, libspectrum_byte ink, libspectrum_byte paper ) {
    x <<= 4;
    y <<= 1;

    int i;
    for( i=1; i<3; i++ ) {
      display_screen[0+x+y*image_width*i] = ( data & 0x8000 ) ? colour_values[ ink ] : colour_values[ paper ];
      display_screen[1+x+y*image_width*i] = ( data & 0x4000 ) ? colour_values[ ink ] : colour_values[ paper ];
      display_screen[2+x+y*image_width*i] = ( data & 0x2000 ) ? colour_values[ ink ] : colour_values[ paper ];
      display_screen[3+x+y*image_width*i] = ( data & 0x1000 ) ? colour_values[ ink ] : colour_values[ paper ];
      display_screen[4+x+y*image_width*i] = ( data & 0x0800 ) ? colour_values[ ink ] : colour_values[ paper ];
      display_screen[5+x+y*image_width*i] = ( data & 0x0400 ) ? colour_values[ ink ] : colour_values[ paper ];
      display_screen[6+x+y*image_width*i] = ( data & 0x0200 ) ? colour_values[ ink ] : colour_values[ paper ];
      display_screen[7+x+y*image_width*i] = ( data & 0x0100 ) ? colour_values[ ink ] : colour_values[ paper ];

      display_screen[ 8+x+y*image_width*i] = ( data & 0x0080 ) ? colour_values[ ink ] : colour_values[ paper ];
      display_screen[ 9+x+y*image_width*i] = ( data & 0x0040 ) ? colour_values[ ink ] : colour_values[ paper ];
      display_screen[10+x+y*image_width*i] = ( data & 0x0020 ) ? colour_values[ ink ] : colour_values[ paper ];
      display_screen[11+x+y*image_width*i] = ( data & 0x0010 ) ? colour_values[ ink ] : colour_values[ paper ];
      display_screen[12+x+y*image_width*i] = ( data & 0x0008 ) ? colour_values[ ink ] : colour_values[ paper ];
      display_screen[13+x+y*image_width*i] = ( data & 0x0004 ) ? colour_values[ ink ] : colour_values[ paper ];
      display_screen[14+x+y*image_width*i] = ( data & 0x0002 ) ? colour_values[ ink ] : colour_values[ paper ];
      display_screen[15+x+y*image_width*i] = ( data & 0x0001 ) ? colour_values[ ink ] : colour_values[ paper ];
    }
}

int uidisplay_end( void ) {
    display_ui_initialised = 0;

    if (display_screen!=NULL) {
        free(display_screen);
        display_screen=NULL;
    }

    if (part_screen!=NULL) {
        free(part_screen);
        part_screen=NULL;
    }
    
    return 0;
}

int uidisplay_hotswap_gfx_mode( void ) { return 0; }

void uidisplay_area( int x, int y, int w, int h ) { }

void uidisplay_frame_save( void ) { }

void uidisplay_frame_restore( void ) { } 

